--- funit.rb	Wed Aug 22 17:59:16 2007
+++ /home/dvirasor/public/funit/lib/funit.rb	Wed Oct 24 16:05:39 2007
@@ -1,9 +1,10 @@
 require 'fortran'
 
-require 'funit/compiler'
-require 'funit/functions'
-require 'funit/assertions'
-require 'funit/testsuite'
+require 'compiler'
+require 'functions'
+require 'assertions'
+require 'testsuite'
+require 'fileutils'
 
 module Funit
 
@@ -10,16 +11,54 @@
   ##
   # the version of this fUnit
 
-  VERSION = '0.9.2'
+  VERSION = '0.9.7'
 
   ##
+  # removes the files generated by fUnit
+
+  def clean_genFiles
+    module_names = Dir["*.fun"].each{|mn| mn.chomp!(".fun")}
+    tbCancelled = module_names.map{|mn| mn+"_fun."}+["TestRunner."]
+    tbCancelled = tbCancelled.map{|tbc| [tbc+"f90",tbc+"o",tbc+"mod"]}.flatten
+    tbCancelled += ["TestRunner", "makeTestRunner"]
+    tbCancelled = (tbCancelled+tbCancelled.map{|tbc| tbc.downcase}).uniq
+    FileUtils.rm_f(tbCancelled)
+  end
+
+  ##
+  # prints a usage help for the user
+
+  def print_help
+    puts <<-END_OF_HELP
+      To use fUnit, type:
+        funit [-options] [test_file_name(s)]
+      The argument(s) is optional. If no argument is given, then all the .fun files inside the working directory will be used.
+
+      The options are:
+        --clean                   => To remove the files generated by fUnit
+        -h, --help                => Prints this help
+        -s <dir>, --source <dir>  => To specify a directory for the non-test source
+    END_OF_HELP
+  end
+
+  ##
   # run all tests
 
-  def run_tests
+  def run_tests(prog_source_dir='.')
     Compiler.new# a test for compiler env set (FIXME: remove this later)
-    write_test_runner( test_suites = parse_command_line )
-    test_suites.each{ |test_suite| TestSuite.new test_suite }
-    compile_tests test_suites
+    write_test_runner( test_files = parse_command_line )
+    test_suites = []
+    test_files.each{ |test_file|
+      tf_content = IO.read(test_file+'.fun')
+      tf_content.scan(/test_suite\s+(\w+)(.*?)end\s+test_suite/m).each{|ts|
+        ts_name = $1
+        if((!File.exist?(ts_name+"_fun.f90")) || File.mtime(ts_name+"_fun.f90") < File.mtime(test_file+".fun")) then
+          TestSuite.new(ts_name, $2)
+        end
+        test_suites.push(ts_name)
+      }
+    }
+    compile_tests(test_suites,prog_source_dir)
     raise "TestRunner failed to execute." unless system "env PATH='.' TestRunner"
   end
 
