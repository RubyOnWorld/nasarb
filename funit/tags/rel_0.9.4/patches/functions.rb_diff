--- functions.rb	Wed Aug 22 19:04:26 2007
+++ /home/dvirasor/public/funit/lib/functions.rb	Mon Nov 12 12:19:28 2007
@@ -12,22 +12,53 @@
 
       implicit none
 
-      integer :: numTests, numAsserts, numAssertsTested, numFailures
+      integer,dimension(<%=test_suites.size%>) :: numTests, numAsserts, &
+                                                 numAssertsTested, numFailures
 
-      <% test_suites.each do |ts| %>
+      <% test_suites.each_index do |i| %>
       print *, ""
-      print *, "<%= ts %> test suite:"
-      call test_<%= ts %> &
-        ( numTests, numAsserts, numAssertsTested, numFailures )
-      print *, "Passed", numAssertsTested, "of", numAsserts, &
+      print *, "<%= test_suites[i] %> test suite:"
+      call test_<%= test_suites[i] %> &
+        ( numTests(<%=i%>), numAsserts(<%=i%>), numAssertsTested(<%=i%>), numFailures(<%=i%>) )
+      print *, "Passed", numAssertsTested(<%=i%>), "of", numAsserts(<%=i%>), &
                "possible asserts comprising",                &
-               numTests-numFailures, "of", numTests, "tests."
+               numTests(<%=i%>)-numFailures(<%=i%>), "of", numTests(<%=i%>), "tests."
       <% end %>
       print *, ""
 
+      write(*,'(A)') "==========[ SUMMARY ]=========="
+      <% max_length = test_suites.max{|a,b| a.length<=>b.length}.length %>
+      <% test_suites.each_index do |i| %>
+      write(*,'(A<%=max_length+2%>)',advance="no") " <%= test_suites[i] %>:"
+      if(numFailures(<%=i%>)==0) then
+        write(*,*) " passed"
+      else
+        write(*,*) " failed   <<<<<"
+      end if
+      <% end %>
+      print *, ""
     end program TestRunner
     }.gsub(/^/,'    '), nil, '<>' # turn off newlines due to <%%>
 
+  MAKEFILE = ERB.new(%q{
+    # makefile to compile TestRunner.f90
+    #
+    # <%= File.basename $0 %> generated this file on <%= Time.now %>.
+
+    OBJ=<%= required_objects.join(' ') %>
+
+    all:testrunner
+
+    testrunner: $(OBJ)
+    <%= "\t#{ENV['FC']}" %> -o TestRunner $(OBJ)
+
+    <% file_dependencies.each do |h,d| %> 
+     <%= h.chomp('.f90')+".o" %>: <%= h+"  "+d.map{|s| s.chomp('.f90')+".o"}.join(' ')+"\n" %>
+     <%= "\tcd "+File.dirname(h) %>;<%= "#{ENV['FC']} #{sourceflag}" %> -c <%= File.basename(h) %>
+    <% end %>
+
+  }.gsub(/^ +/,''), nil, '<>')
+
   def requested_modules(module_names)
     if module_names.empty?
       module_names = Dir["*.fun"].each{ |mod| mod.chomp! ".fun" }
@@ -76,14 +107,30 @@
     $stderr.puts "\n *Warning: #{message} [#{test_suite}.fun:#$.]"
   end
 
-  def compile_tests test_suites
+  def compile_tests(test_suites,prog_source_dir='.')
     puts "computing dependencies"
-    dependencies = Fortran::Dependencies.new
+
+    # calculates parameters
+    if(prog_source_dir=='.') then
+      sourceflag = ""
+    else
+#      prog_source_dir = File.expand_path(prog_source_dir)  # commented as it doesn't seem necessary
+      sourceflag = " "+ ENV['FSFLAG'] + prog_source_dir
+    end
+    current_dir = `pwd`.chomp
+    sp = ['.'] + (prog_source_dir.empty? ? [] : [prog_source_dir])
+
+    dependencies = Fortran::Dependencies.new(:search_paths=> sp)
     puts "locating associated source files and sorting for compilation"
-    required_sources = dependencies.required_source_files('TestRunner.f90')
+    dependencies.source_file_dependencies('TestRunner.f90')
+    file_dependencies = dependencies.file_dependencies
+    required_objects = file_dependencies.values.flatten.uniq.map{|s|s.chomp('f90')+"o"}
+    required_objects += ['TestRunner.o']
 
-    puts compile = "#{ENV['FC']} #{ENV['FCFLAGS']} -o TestRunner #{required_sources.join(' ')}"
+    File.open("makeTestRunner", "w") {|file| file.puts MAKEFILE.result(binding)}
 
+    compile = "make -f makeTestRunner"
+
     raise "Compile failed." unless system compile
   end
 
