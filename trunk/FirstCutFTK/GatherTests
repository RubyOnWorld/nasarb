#!/usr/bin/env ruby
#
# $Id$
#
# Generates a Fortran 90 code which runs all the mobility
# test suites in this directory (or only those test suites
# specified on the command line).

def printUsage
 puts <<-USAGE
 Usage: #{File.basename $0} [test names (w/o Test.ftk suffix)]
 USAGE
end

if ARGV[0]
 testSuites = ARGV
else
 testSuites = Dir["*Test.ftk"]
 testSuites.each { |testSuite| testSuite.chomp! "Test.ftk" }
end

testSuitesNotFound = []
testSuites.each do |testSuite|
 testSuitesNotFound.push(testSuite) unless FileTest.exist?(testSuite+"Test.ftk")
end
if (!testSuitesNotFound.empty?)
 print "\n"
 print " Error: could not find test"
 print "s" unless testSuitesNotFound.size == 1
 print ":"
 testSuitesNotFound.each {|testSuiteNotFound| print " #{testSuiteNotFound}"}
 print "\n\n"
 print " Test suites available in this directory:\n"
 Dir["*Test.F90"].each { |testSuite| print "  #{testSuite.chomp('Test.F90')}\n" }
 printUsage
 File.delete "TestRunner.f90" if FileTest.exists? "TestRunner.f90"
 exit 1
end

testRunner = File.new "TestRunner.f90", "w"

testRunner.puts <<HEADER
! TestRunner.f90 - runs Fortran mobility test suites
!
! [Generated by #{File.basename $0} Ruby script.]
!
program TestRunner

 use FortranTK

 implicit none

 continue

HEADER

testSuites.each do |testSuite|
 testRunner.puts " print *, \"\""
 testRunner.puts " print *, \"#{testSuite} Test Suite (#{testSuite}Test.ftk):\""
 testRunner.puts " call TestSuite#{testSuite}"
 testRunner.puts ""
end

testRunner.puts <<TAILER
end program TestRunner
TAILER

testMakefile = File.new "TestBits.mk", "w"

sources = []
testSuites.each do |testSuite|
 sources.push(testSuite) if FileTest.exists?(testSuite+".f90")
end

sourceFiles = sources.join(".f90 ") + ".f90"
testSuiteFiles = testSuites.join("Test.f90 ") + "Test.f90"

testMakefile.puts <<MAKEBITS
 EXECUTABLE = TestRunner
 SOURCES = #{sourceFiles}
 TESTS   = #{testSuiteFiles}
 RUNNER  = TestRunner.f90
MAKEBITS

testSuites.each do |testSuite|

 testCode = File.new(testSuite+"Test.f90","w")

 testCode.puts "subroutine TestSuite#{testSuite}"
 testCode.puts " use FortranTK"
 testCode.puts " use #{testSuite}"

 inTest = false
 testName = ""
 lineNumber = 0

 IO.foreach(testSuite+"Test.ftk") do |line|
  lineNumber += 1
  case line
   when /TestSub \s*(.*)\s*\((.*)\)/
    testName = $1
    testCode.puts "! BEGIN TestSub macro expansion"
    if inTest
     testCode.puts "! END   A Test\n\n\n"
     inTest = false
    end
    testCode.puts "! BEGIN A Test ======================"
    inTest = true
    testCode.puts "print *, \" #{testName} subroutine test:\""
    testCode.puts "call #{testName} ( #$2 )"
    testCode.puts "! END   TestSub macro expansion\n"
   when /(IsFloatEqual)\s*\((.*),(.*),(.*)\)/
    testCode.puts "! BEGIN #$1 macro expansion"
    testCode.puts "if (.not.(#$3+#$4.ge.#$2.and.#$3-#$4.le.#$2))then"
    testCode.puts " testKitHasFailed = .true."
    testCode.puts " print *, \"  FAILURE! #$1: Line #{lineNumber}\""
    testCode.puts " print *, \"   #$2 (\",#$2,\") is not #$3 within #$4\""
    testCode.puts "else"
    testCode.puts " testKitHasPassed = .true."
    testCode.puts "endif"
    testCode.puts "! END   #$1 macro expansion\n\n"
   when /(IsEqual)\s*\((.*),(.*)\)/
    testCode.puts "! BEGIN #$1 macro expansion"
    testCode.puts "if (.not.(#$2==#$3)) then"
    testCode.puts " testKitHasFailed = .true."
    testCode.puts " print *, \"  FAILURE! #$1: Line #{lineNumber}\""
    testCode.puts " print *, \"   #$2 (\", #$2, \") is not #$3\""
    testCode.puts "else"
    testCode.puts " testKitHasPassed = .true."
    testCode.puts "endif"
    testCode.puts "! END   #$1 macro expansion\n\n"
   when /(IsTrue)\s*\((.*)\)/
    testCode.puts "! BEGIN #$1 macro expansion"
    testCode.puts "if (.not.(#$2)) then"
    testCode.puts " testKitHasFailed = .true."
    testCode.puts " print *, \"  FAILURE! #$1: Line #{lineNumber}\""
    testCode.puts " print *, \"   #$2 (\", #$2, \") is not true\""
    testCode.puts "else"
    testCode.puts " testKitHasPassed = .true."
    testCode.puts "endif"
    testCode.puts "! END   #$1 macro expansion\n\n"
   when /(IsFalse)\s*\((.*)\)/
    testCode.puts "! BEGIN $1 macro expansion"
    testCode.puts " if (#$2) then"
    testCode.puts "  testKitHasFailed = .true."
    testCode.puts "  print *, \"  FAILURE! #$1: Line #{lineNumber}\""
    testCode.puts "  print *, \"   #$2 (\", #$2, \") is not false\""
    testCode.puts " else"
    testCode.puts "  testKitHasPassed = .true."
    testCode.puts " endif"
    testCode.puts " ! END   #$1 macro expansion\n\n"
   else
    testCode.puts line
  end
 end
 testCode.puts "end subroutine TestSuite#{testSuite}"
 testCode.close
end
