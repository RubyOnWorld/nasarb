#!/usr/bin/env ruby
#
# $Id$
#
# Generates a Fortran 90 code which runs all the mobility
# test suites in this directory (or only those test suites
# specified on the command line).


# command line

testSuites = Dir["*Test.ftk"]
testSuites.each { |testSuite| testSuite.chomp! "Test.ftk" }

unless $*.empty? # command line argument given
 testSuitesNotFound = $* - ( $* & testSuites )
 unless testSuitesNotFound.empty? # can't find a test
  print "\n"
  print " Error: could not find test suite:"
  testSuitesNotFound.each {|testSuiteNotFound| print " #{testSuiteNotFound}"}
  print "\n\n"
  print " Test suites available in this directory:\n"
  testSuites.each { |testSuite| print "  #{testSuite}\n" }
  print "\nUsage: #{File.basename $0} [test names (w/o Test.ftk suffix)]\n\n"
  exit 1
 else
  testSuites = $*
 end
end

# Test runner creation:

testRunner = File.new "TestRunner.f90", "w"

testRunner.puts <<HEADER
! TestRunner.f90 - runs Fortran mobility test suites
!
! [Do not edit: generated by #{File.basename $0} Ruby script.]
!
program TestRunner

HEADER

#testSuites.each {|testSuite| testRunner.puts " use #{testSuite}Test" }

testRunner.puts <<HEADERCONT

 implicit none

 continue

HEADERCONT

testSuites.each do |testSuite|
 testRunner.puts " print *, \"\""
 testRunner.puts " print *, \"#{testSuite} Test Suite (#{testSuite}Test.ftk):\""
 testRunner.puts " call TestSuite#{testSuite}"
 testRunner.puts ""
end

testRunner.puts <<TAILER
end program TestRunner
TAILER

testRunner.close

testSuites.each do |testSuite|

 testCode = File.new(testSuite+"Test.f90","w")

 testCode.puts "subroutine TestSuite#{testSuite}"
 testCode.puts " use #{testSuite}"

 inTest = false
 testName = ""
 lineNumber = 0

 IO.foreach(testSuite+"Test.ftk") do |line|
  lineNumber += 1
  case line
   when /TestSub \s*(.*)\s*\((.*)\)/
    testName = $1
    testCode.puts "! BEGIN TestSub macro expansion"
    if inTest
     testCode.puts "! END   A Test\n\n\n"
     inTest = false
    end
    testCode.puts "! BEGIN A Test ======================"
    inTest = true
    testCode.puts "print *, \" #{testName} subroutine test:\""
    testCode.puts "call #{testName} ( #$2 )"
   when /(IsFloatEqual)\s*\((.*),(.*),(.*)\)/
    testCode.puts "! BEGIN #$1 macro expansion"
    testCode.puts "if (.not.(#$3+#$4.ge.#$2.and.#$3-#$4.le.#$2))then"
    testCode.puts " print *, \"  FAILURE! #$1: Line #{lineNumber}\""
    testCode.puts " print *, \"   #$2 (\",#$2,\") is not #$3 within #$4\""
    testCode.puts "endif"
   when /(IsEqual)\s*\((.*),(.*)\)/
    testCode.puts "! BEGIN #$1 macro expansion"
    testCode.puts "if (.not.(#$2==#$3)) then"
    testCode.puts " print *, \"  FAILURE! #$1: Line #{lineNumber}\""
    testCode.puts " print *, \"   #$2 (\", #$2, \") is not #$3\""
    testCode.puts "endif"
   when /(IsTrue)\s*\((.*)\)/
    testCode.puts "! BEGIN #$1 macro expansion"
    testCode.puts "if (.not.(#$2)) then"
    testCode.puts " print *, \"  FAILURE! #$1: Line #{lineNumber}\""
    testCode.puts " print *, \"   #$2 (\", #$2, \") is not true\""
    testCode.puts "endif"
   when /(IsFalse)\s*\((.*)\)/
    testCode.puts "! BEGIN $1 macro expansion"
    testCode.puts " if (#$2) then"
    testCode.puts "  print *, \"  FAILURE! #$1: Line #{lineNumber}\""
    testCode.puts "  print *, \"   #$2 (\", #$2, \") is not false\""
    testCode.puts " endif"
   else
    testCode.puts line
  end
 end
 testCode.puts "end subroutine TestSuite#{testSuite}"
 testCode.close
end

# Compile, link, and run

sources = testSuites.join(".f90 ") + ".f90"
tests = testSuites.join("Test.f90 ") + "Test.f90"
system "TestRunner" \
 if (system "lf95 -o TestRunner #{sources} #{tests} TestRunner.f90")
