module Funit

  class Compiler

    attr_reader :name

    def initialize( name=ENV['F9X'] )
      errorMessage = <<-ENVIRON

Fortran compiler environment variable 'F9X' not set:

 for bourne-based shells: export F9X=lf95 (in .profile)
      for c-based shells: setenv F9X lf95 (in .login)
             for windows: set F9X=C:\\Program Files\\lf95 (in autoexec.bat)

      ENVIRON
      raise(errorMessage) unless @name = name
    end

  end

  def requestedModules(moduleNames)
    if (moduleNames.empty?)
      moduleNames = Dir["*MT.ftk"].each{ |mod| mod.chomp! "MT.ftk" }
    end
    moduleNames
  end

  def ftkExists?(moduleName)
    File.exists? moduleName+"MT.ftk"
  end

  def parseCommandLine

    moduleNames = requestedModules(ARGV)

    if moduleNames.empty?
      raise "   *Error: no test suites found in this directory"
    end

    moduleNames.each do |mod|
      unless ftkExists?(mod) 
        errorMessage = <<-FTKDOESNOTEXIST
 Error: could not find test suite #{mod}MT.ftk
 Test suites available in this directory:
 #{requestedModules([]).join(' ')}

 Usage: #{File.basename $0} [test names (w/o MT.ftk suffix)]
        FTKDOESNOTEXIST
        raise errorMessage
      end
    end

  end

  def writeTestRunner testSuites

    File.delete("TestRunner.f90") if File.exists?("TestRunner.f90")
    testRunner = File.new "TestRunner.f90", "w"

    testRunner.puts <<-HEADER
! TestRunner.f90 - runs Fortran mobility test suites
!
! [Dynamically generated by #{File.basename $0} Ruby script #{Time.now}.]

program TestRunner

    HEADER

    testSuites.each { |testSuite| testRunner.puts " use #{testSuite}MT" }

    testRunner.puts <<-DECLARE

 implicit none

 integer :: numTests, numAsserts, numAssertsTested, numFailures
    DECLARE

    testSuites.each do |testSuite|
      testRunner.puts <<-TRYIT

 print *, ""
 print *, "#{testSuite} test suite:"
 call MT#{testSuite}( numTests, &
        numAsserts, numAssertsTested, numFailures )
 print *, "Passed", numAssertsTested, "of", numAsserts, &
          "possible asserts comprising", &
           numTests-numFailures, "of", numTests, "tests." 
      TRYIT
    end

    testRunner.puts "\n print *, \"\""
    testRunner.puts "\nend program TestRunner"
    testRunner.close
    File.chmod(0444,"TestRunner.f90")
  end

  def syntaxError( message, testSuite )
    raise "\n   *Error: #{message} [#{testSuite}MT.ftk:#$.]\n\n"
  end

  def warning( message, testSuite )
    $stderr.puts "\n *Warning: #{message} [#{testSuite}MT.ftk:#$.]"
  end

  def compileTests testSuites
    require 'fortran_deps'

    puts "computing dependencies"
    dependencies = Depend.new(['.', '../LibF90', '../PHYSICS_DEPS'])
    puts "locating associated source files and sorting for compilation"
    requiredSources = dependencies.required_source_files('TestRunner.f90')

    puts compile = "#{ENV['F9X']} #{ENV['F9X_LDFLAGS']} -o TestRunner \\\n  #{requiredSources.join(" \\\n  ")}"

    raise "Compile failed." unless system(compile)

  end

  # set some regular expressions:
  $keyword = /(begin|end)(Setup|Teardown|Test)|Is(RealEqual|Equal|False|True|EqualWithin)\(.*\)/i
  $commentLine = /^\s*!/

end # module Funit
