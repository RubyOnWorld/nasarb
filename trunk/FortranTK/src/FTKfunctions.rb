
def checkForCompiler
 unless ENV['F9X']
  puts <<-ENVIRON

Fortran compiler environment variable 'F9X' not set:

 for bourne-based shells: export F9X=lf95 (in .profile)
      for c-based shells: setenv F9X lf95 (in .login)
             for windows: set F9X=C:\Program Files\lf95 (in autoexec.bat)

  ENVIRON
  exit 1
 end
 puts
end


def parseCommandLine

 allTestSuites = Dir["*TS.ftk"]
 allTestSuites.each { |suiteName| suiteName.chomp! "TS.ftk" }

 return allTestSuites if $*.empty?

 testSuitesNotFound = $* - ( $* & allTestSuites )
 if testSuitesNotFound.empty?
  return $*
 else
  print "\n Error: could not find test suite:"
  testSuitesNotFound.each {|testSuiteNotFound| print " #{testSuiteNotFound}"}
  print "\n\n Test suites available in this directory:\n"
  allTestSuites.each { |testSuite| print "  #{testSuite}\n" }
  print "\nUsage: #{File.basename $0} [test names (w/o TS.ftk suffix)]\n\n"
  exit 1
 end

end


def writeTestRunner testSuites

 File.delete("TestRunner.f90") if File.exists?("TestRunner.f90")
 testRunner = File.new "TestRunner.f90", "w"

 testRunner.puts <<-HEADER
! TestRunner.f90 - runs Fortran mobility test suites
!
! [Dynamically generated by #{File.basename $0} Ruby script #{Time.now}.]

program TestRunner

 HEADER

 testRunner.puts " use StopWatch"

 testSuites.each { |testSuite| testRunner.puts " use #{testSuite}TS" }

 testRunner.puts <<-DECLARE

 implicit none

 integer :: numTests, numAsserts, numAssertsTested, numFailures
 real :: time
 DECLARE

 testRunner.puts " time = secSinceLast()"
 testSuites.each do |testSuite|
  testRunner.puts <<-TRYIT

 print *, ""
 print *, "#{testSuite} test suite:"
 call TS#{testSuite}( numTests, &
        numAsserts, numAssertsTested, numFailures )
 time = secSinceLast()
 print *, "Passed", numAssertsTested, "of", numAsserts, &
          "possible asserts comprising", &
           numTests-numFailures, "of", numTests, "tests" 
 write (*,'(" in ",f5.3," seconds.")') time
  TRYIT
 end

 testRunner.puts "\n print *, \"\""
 testRunner.puts "\nend program TestRunner"
 testRunner.close
 File.chmod(0444,"TestRunner.f90")
end

def syntaxError( message, testSuite )
 $stderr.puts "\n   *Error: #{message} [#{testSuite}TS.ftk:#$.]\n\n"
 exit 1
end

def warning( message, testSuite )
 $stderr.puts "\n *Warning: #{message} [#{testSuite}TS.ftk:#$.]"
end

def runTests testSuites

 puts

 sources = testSuites.join(".f90 ") + ".f90"
 tests   = testSuites.join("TS.f90 ") + "TS.f90"

 depends = Array.new

 testSuites.each do |testSuite|
  IO.foreach(testSuite+".f90") do |$_|
   next unless /^\s*use\s+(\w+)/i
   depends << $1
  end
 end

 testSuites.each do |testSuite|
  IO.foreach(testSuite+"TS.f90") do |$_|
   next unless /^\s*use\s+(\w+)/i
   depends << $1
  end
 end

 depends.uniq!
 depends = depends - testSuites
 dependents = depends.join(".f90 ") + ".f90" unless depends.size
 
 compile = "#{ENV['F9X']} #{ENV['F9X_LDFLAGS']} -o TestRunner StopWatch.f90 #{dependents} #{sources} #{tests} TestRunner.f90"

 if system(compile)
  system "./TestRunner"
 else
  print "\nCompile failed.\n"
 end

end

# set some regular expressions:
$keyword = /(begin|end)(Setup|Teardown|Test)|Is(RealEqual|Equal|False|True|EqualWithin)\(.*\)/i
$commentLine = /^\s*!/
