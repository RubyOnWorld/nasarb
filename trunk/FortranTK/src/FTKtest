#!/usr/bin/env ruby
#
# $Id$
#
# Generates a Fortran 90 code which runs all the mobility
# test suites in this directory (or only those test suites
# specified on the command line).


# check for a Fortran Compiler:

unless ENV['F9X']
 puts <<-ENVIRON

Fortran compiler environment variable 'F9X' not set:
 for bourne-based shells: export F9X=lf95 (in .profile)
      for c-based shells: setenv F9X lf95 (in .login)
             for windows: set F9X=C:\Program Files\lf95 (in autoexec.bat)

 ENVIRON
 exit 1
end


# find all the test suites in the current directory:

testSuites = Dir["*TS.ftk"]
testSuites.each { |testSuite| testSuite.chomp! "TS.ftk" }

# optionally, handle test suites given as command line arguments:

unless $*.empty?
 testSuitesNotFound = $* - ( $* & testSuites )
 unless testSuitesNotFound.empty?
  print "\n Error: could not find test suite:"
  testSuitesNotFound.each {|testSuiteNotFound| print " #{testSuiteNotFound}"}
  print "\n\n Test suites available in this directory:\n"
  testSuites.each { |testSuite| print "  #{testSuite}\n" }
  print "\nUsage: #{File.basename $0} [test names (w/o TS.ftk suffix)]\n\n"
  exit 1
 else
  testSuites = $*
 end
end


# create the Fortran9X program which calls all the test suites:

testRunner = File.new "TestRunner.f90", "w"

testRunner.puts <<HEADER
! TestRunner.f90 - runs Fortran mobility test suites
!
! [Dynamically generated by #{File.basename $0} Ruby script #{Time.now}.]

program TestRunner

HEADER

testSuites.each { |testSuite| testRunner.puts " use #{testSuite}TestSuite" }

testRunner.puts <<DECLARE

 implicit none

 integer :: numTests, numAsserts, numAssertsTested, numFailures
DECLARE

testSuites.each do |testSuite|
 testRunner.puts <<-TRYIT

 print *, ""
 print *, "#{testSuite} test suite:"
 call TS#{testSuite}( numTests, numAsserts, numAssertsTested, numFailures )
 print *, "Completed", numTests-numFailures, "of", numTests,&
   "tests comprising", numAssertsTested, "of", numAsserts, "possible asserts."
 TRYIT
end

testRunner.puts "\n print *, \"\""
testRunner.puts "\nend program TestRunner"
testRunner.close

# convert each *TS.ftk file into pure Fortran9x:

testSuites.each do |testSuite|

 testSuiteCode = File.new(testSuite+"TS.f90","w")

 testSuiteCode.puts <<TOP
! #{testSuite}TS.f90 - a Fortran mobility test suite
!
! [dynamically generated from #{testSuite}TS.ftk
!  by #{File.basename $0} Ruby script #{Time.now}]

module #{testSuite}TestSuite

 use #{testSuite}

 implicit none

 private

 public :: TS#{testSuite}

 logical :: noAssertFailed

 integer :: numTests          = 0
 integer :: numAsserts        = 0
 integer :: numAssertsTested  = 0
 integer :: numFailures       = 0

TOP

 inTest     = false
 inSetup    = false
 inTeardown = false
 noMacrosYet   = true

 setupCode     = []
 teardownCode  = []
 callTestsCode = []

 testName   = ""
 lineNumber = 0

 def expandAssert( name, condition, message, lineNumber, testName, testSuite, testSuiteCode )
  testSuiteCode.puts "\n  ! #{name} assertion"
  testSuiteCode.puts "  numAsserts = numAsserts + 1"
  testSuiteCode.puts "  if (noAssertFailed) then"
  testSuiteCode.puts "   if (#{condition})then"
  testSuiteCode.puts "    print *, \"  Test #{testName}: #{name} FAILED (Line #{lineNumber} of #{testSuite}TS.ftk)\""
  testSuiteCode.puts "    print *, \"   \",#{message}"
  testSuiteCode.puts "    noAssertFailed = .false."
  testSuiteCode.puts "    numFailures = numFailures + 1"
  testSuiteCode.puts "   else"
  testSuiteCode.puts "    numAssertsTested = numAssertsTested + 1"
  testSuiteCode.puts "   endif"
  testSuiteCode.puts "  endif"
 end

 IO.foreach(testSuite+"TS.ftk") do |line|
  if line=~/begin(Setup|Teardown|Test)/ && noMacrosYet
   testSuiteCode.puts " contains\n\n"
   noMacrosYet = false
  end
  lineNumber += 1
  case line
   when /^\s*!/
    testSuiteCode.puts line
   when /beginSetup/
    inSetup = true
   when /endSetup/
    inSetup = false
   when /beginTearDown/
    inTeardown = true
   when /endTeardown/
    inTeardown = false
   when /beginTest \s*(.*)/
    inTest = true
    testName = $1
    testSuiteCode.puts " subroutine Test#{testName}\n\n"
    callTestsCode.push "\n  call Setup"
    callTestsCode.push "  call Test#{testName}"
    callTestsCode.push "  call Teardown"
   when /beginTest/
    $stderr.puts "No test name following beginTest: Line #{lineNumber} of #{testSuite}TS.ftk"
    exit 1
   when /endTest/
    inTest = false
    testSuiteCode.puts "\n  numTests = numTests + 1\n\n"
    testSuiteCode.puts " end subroutine Test#{testName}\n\n"
   when /(IsRealEqual)\s*\((.*),(.*)\)/
    if !inTest
     $stderr.puts "Error: assertion outside of a test block: Line #{lineNumber} of #{testSuite}TS.ftk"
     exit 1
    end
    condition = ".not.(#$3+2*spacing(real(#$3)).ge.#$2.and.#$3-2*spacing(real(#$3)).le.#$2)"
    message = "#$2,\"is not\",#$3,\"within\",2*spacing(real(#$3))"
    expandAssert( $1, condition, message, lineNumber, testName, testSuite, testSuiteCode )
   when /(IsEqualWithin)\s*\((.*),(.*),(.*)\)/
    if !inTest
     $stderr.puts "Error: assertion outside of a test block: Line #{lineNumber} of #{testSuite}TS.ftk"
     exit 1
    end
    condition = ".not.(#$3+#$4.ge.#$2.and.#$3-#$4.le.#$2)"
    message = "#$2,\"is not\",#$3,\"within\",#$4"
    expandAssert( $1, condition, message, lineNumber, testName, testSuite, testSuiteCode )
   when /(IsEqual)\s*\((.*),(.*)\)/
    if !inTest
     $stderr.puts "Error: assertion outside of a test block: Line #{lineNumber} of #{testSuite}TS.ftk"
     exit 1
    end
    condition = ".not.(#$2==#$3)"
    message = "#$2, \"is not\", #$3"
    expandAssert( $1, condition, message, lineNumber, testName, testSuite, testSuiteCode )
   when /(IsTrue)\s*\((.*)\)/
    if !inTest
     $stderr.puts "Error: assertion outside of a test block: Line #{lineNumber} of #{testSuite}TS.ftk"
     exit 1
    end
    condition = ".not.(#$2)"
    message = "#$2, \"is not true\""
    expandAssert( $1, condition, message, lineNumber, testName, testSuite, testSuiteCode )
   when /(IsFalse)\s*\((.*)\)/
    if !inTest
     $stderr.puts "Error: assertion outside of a test block: Line #{lineNumber} of #{testSuite}TS.ftk"
     exit 1
    end
    condition = "#$2"
    message = "#$2, \"is not false\""
    expandAssert( $1, condition, message, lineNumber, testName, testSuite, testSuiteCode )
   else
    if inSetup
     setupCode.push line
    elsif inTeardown
     teardownCode.push line
    else
     testSuiteCode.puts line
    end
  end
 end

 testSuiteCode.puts "\n subroutine Setup"
 testSuiteCode.puts "  noAssertFailed = .true."
 setupCode.each    { |line| testSuiteCode.puts line }
 testSuiteCode.puts " end subroutine Setup\n\n"

 testSuiteCode.puts "\n subroutine Teardown"
 teardownCode.each { |line| testSuiteCode.puts line }
 testSuiteCode.puts " end subroutine Teardown\n\n"

 testSuiteCode.puts <<-NEXTONE

 subroutine TS#{testSuite}( nTests, nAsserts, nAssertsTested, nFailures )

  integer :: nTests
  integer :: nAsserts
  integer :: nAssertsTested
  integer :: nFailures

  continue
 NEXTONE

 callTestsCode.each { |line| testSuiteCode.puts line }

 testSuiteCode.puts <<LASTONE

  nTests          = numTests
  nAsserts        = numAsserts
  nAssertsTested  = numAssertsTested
  nFailures       = numFailures

 end subroutine TS#{testSuite}

end module #{testSuite}TestSuite
LASTONE

 testSuiteCode.close

end


# Comple, link, and run:

sources = testSuites.join(".f90 ") + ".f90"
tests   = testSuites.join("TS.f90 ") + "TS.f90"

compile = "#{ENV['F9X']} -o TestRunner #{sources} #{tests} TestRunner.f90"

if system(compile)
 system "./TestRunner" if File.exists? "TestRunner"
else
 print "\nCompile failed.\n"
end
