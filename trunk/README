= FUnit: a Fortran Unit Testing Framework

FUnit is a unit testing framework for Fortran modules.

Unit tests are written in Fortran fragments that use a small
set of testing-specific extensions.  FUnit transforms these
fragments into valid Fortran code and compiles,
links, and runs them against the module under test.

* Documentation: http://funit.rubyforge.org
* Project Page: http://rubyforge.org/projects/funit

== Requirements

1. A Fortran 90/95/2003 compiler (set via F9X environment variable)
2. {The Ruby language}[http://www.ruby-lang.org/]
3. {RubyGems package manager}[http://rubyforge.org/projects/rubygems/]

== Installation

 gem install funit

== Example

Suppose you have a module in <tt>gas_physics.f90</tt> like so,

 module gas_physics
 ..
 contains
   ..
   function viscosity(temperature)
     real :: viscosity, temperature
     viscosity = 2.0e-3 * temperature**1.5
   end function
   ..
 end module

The tests of this module would be contained in <tt>gas_physicsMT.ftk</tt>,
and might contain a test like,

 ..
 beginTest viscosity_varies_as_temperature
  IsRealEqual( 0.0, viscosity(0.0) )
  IsEqualWithin( 0.7071, viscosity(50.0), 1e-3 )
 endTest
 ..

Note: these sorts of fragments are all you need, the framework provides
the rest of the trappings to turn this into valid Fortran code.

You would run the tests for this module with the command,

 funit gas_physics

and it would transform your fragments contained in <tt>gas_physicsMT.ftk</tt>
into valid Fortran code, create a test runner program, compile everything,
and run the tests.  A sample output would look like,

 parsing gas_physicsMT.ftk
 computing dependencies
 locating associated source files and sorting for compilation
 g95 -o TestRunner 
   gas_physics.f90 \
   gas_physicsMT.f90 \
   TestRunner.f90
 
 gas_physics test suite:
 Passed 2 of 2 possible asserts comprising 1 of 1 tests.

== Support

http://rubyforge.org/tracker/?group_id=1416

== License

FUnit is released under the NASA Open Source Agreement -- see
COPYING[http://funit.rubyforge.org/files/COPYING.html] for details.

== A Brief History

On October 4, 2001, Mike Hill (then of Object Mentor, Inc.)
visited NASA Langley Research Center in Hampton, Virginia
and gave a test-first design talk at Institute for Computer
and Applied Sciences and Engineering (ICASE).  Copies of his
slides are available at http://www.icase.edu/series/MPP/.
Mike spent the afternoon with Bil Kleb, Bill Wood, Karen Bibb,
and Mike Park reasoning out how we might create a testing framework
for Fortran 90.  By the end of the afternoon we had a working
protoype based on the macro expansion techniques employeed in
Mike Hill's cpptestkit.

The basic idea is that test routines should easily be written in 
a psuedo-Fortran style (i.e., very lightweight), processed (via
the C preproccesor or a script) into valid Fortran 90, and invoked
by a master, test-runner Fortran 90 code, which is dynamically-
created, compiled, linked, and run.

== To Do

* Make tests so that they fail gracefully if Fortran compiler
  not found.
* Work out RubyGEM packaging kinks.
* Change from CamelCase to snake_case.
* Use 'test' keyword instead of 'beginTest' business.
* Clean up documentation.
* To increase portability, create a single, stand-alone executable with
  Erik Veenstra's RubyScript2Exe[http://www.erikveen.dds.nl/rubyscript2exe/].
